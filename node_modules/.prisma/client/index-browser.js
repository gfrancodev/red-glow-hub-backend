
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.1
 * Query Engine version: 272a37d34178c2894197e17273bf937f25acdeac
 */
Prisma.prismaVersion = {
  client: "6.17.1",
  engine: "272a37d34178c2894197e17273bf937f25acdeac"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password_hash: 'password_hash',
  role: 'role',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.ProfileScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  username: 'username',
  display_name: 'display_name',
  bio: 'bio',
  avatar_url: 'avatar_url',
  state: 'state',
  city: 'city',
  city_slug: 'city_slug',
  contact_email: 'contact_email',
  whatsapp: 'whatsapp',
  twitch: 'twitch',
  youtube: 'youtube',
  instagram: 'instagram',
  featured_media_id: 'featured_media_id',
  tags_count: 'tags_count',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.MediaScalarFieldEnum = {
  id: 'id',
  player_id: 'player_id',
  type: 'type',
  source: 'source',
  url: 'url',
  poster_url: 'poster_url',
  blur_data_url: 'blur_data_url',
  width: 'width',
  height: 'height',
  duration_sec: 'duration_sec',
  focal_point_x: 'focal_point_x',
  focal_point_y: 'focal_point_y',
  variants: 'variants',
  hls_url: 'hls_url',
  nsfw_score: 'nsfw_score',
  nsfw_labels: 'nsfw_labels',
  title: 'title',
  tags_cache: 'tags_cache',
  status: 'status',
  moderation_history: 'moderation_history',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  slug: 'slug',
  label: 'label',
  aliases: 'aliases',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.Player_tagScalarFieldEnum = {
  id: 'id',
  player_id: 'player_id',
  tag_id: 'tag_id',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.BoostScalarFieldEnum = {
  id: 'id',
  player_id: 'player_id',
  status: 'status',
  starts_at: 'starts_at',
  ends_at: 'ends_at',
  provider: 'provider',
  external_id: 'external_id',
  amount_cents: 'amount_cents',
  currency: 'currency',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.ReportScalarFieldEnum = {
  id: 'id',
  reporter_user_id: 'reporter_user_id',
  target_type: 'target_type',
  target_id: 'target_id',
  reason: 'reason',
  details: 'details',
  severity: 'severity',
  status: 'status',
  resolution_note: 'resolution_note',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.StrikeScalarFieldEnum = {
  id: 'id',
  player_id: 'player_id',
  reason: 'reason',
  severity: 'severity',
  expires_at: 'expires_at',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.User_noteScalarFieldEnum = {
  id: 'id',
  player_id: 'player_id',
  author_id: 'author_id',
  note: 'note',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.AnnouncementScalarFieldEnum = {
  id: 'id',
  title: 'title',
  body_md: 'body_md',
  status: 'status',
  starts_at: 'starts_at',
  ends_at: 'ends_at',
  segment_tags: 'segment_tags',
  segment_states: 'segment_states',
  segment_devices: 'segment_devices',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.Feature_slotScalarFieldEnum = {
  id: 'id',
  slot_key: 'slot_key',
  description: 'description',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.Featured_assignmentScalarFieldEnum = {
  id: 'id',
  slot_key: 'slot_key',
  player_id: 'player_id',
  media_id: 'media_id',
  starts_at: 'starts_at',
  ends_at: 'ends_at',
  priority: 'priority',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.SettingScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value_json: 'value_json',
  status: 'status',
  version: 'version',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.Support_ticketScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  email: 'email',
  subject: 'subject',
  message: 'message',
  priority: 'priority',
  status: 'status',
  assigned_to: 'assigned_to',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.Contact_eventScalarFieldEnum = {
  id: 'id',
  player_id: 'player_id',
  channel: 'channel',
  requester_ip: 'requester_ip',
  user_agent: 'user_agent',
  referrer: 'referrer',
  message: 'message',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.Audit_logScalarFieldEnum = {
  id: 'id',
  actor_user_id: 'actor_user_id',
  actor_role: 'actor_role',
  entity_type: 'entity_type',
  entity_id: 'entity_id',
  action: 'action',
  payload: 'payload',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.Webhook_eventScalarFieldEnum = {
  id: 'id',
  provider: 'provider',
  event_type: 'event_type',
  payload: 'payload',
  related_type: 'related_type',
  related_id: 'related_id',
  status: 'status',
  retry_count: 'retry_count',
  last_error: 'last_error',
  next_retry_at: 'next_retry_at',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  user_id: 'user_id',
  session_token: 'session_token',
  ip: 'ip',
  user_agent: 'user_agent',
  expires_at: 'expires_at',
  status: 'status',
  created_at: 'created_at',
  updated_at: 'updated_at',
  deleted_at: 'deleted_at'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.user_role = exports.$Enums.user_role = {
  player: 'player',
  admin: 'admin',
  moderator: 'moderator',
  curator: 'curator',
  support: 'support',
  readonly: 'readonly'
};

exports.user_status = exports.$Enums.user_status = {
  active: 'active',
  review: 'review',
  restricted: 'restricted',
  suspended: 'suspended',
  banned: 'banned',
  shadowban: 'shadowban'
};

exports.profile_status = exports.$Enums.profile_status = {
  active: 'active',
  review: 'review',
  suspended: 'suspended',
  banned: 'banned',
  shadowban: 'shadowban',
  archived: 'archived'
};

exports.media_type = exports.$Enums.media_type = {
  image: 'image',
  video: 'video'
};

exports.media_source = exports.$Enums.media_source = {
  upload: 'upload',
  external: 'external'
};

exports.media_status = exports.$Enums.media_status = {
  pending: 'pending',
  approved: 'approved',
  rejected: 'rejected',
  takedown: 'takedown',
  archived: 'archived'
};

exports.setting_status = exports.$Enums.setting_status = {
  active: 'active',
  inactive: 'inactive'
};

exports.boost_status = exports.$Enums.boost_status = {
  scheduled: 'scheduled',
  active: 'active',
  expired: 'expired',
  canceled: 'canceled'
};

exports.provider_kind = exports.$Enums.provider_kind = {
  stripe: 'stripe',
  mercadopago: 'mercadopago',
  other: 'other'
};

exports.report_reason = exports.$Enums.report_reason = {
  abuse: 'abuse',
  harassment: 'harassment',
  spam: 'spam',
  fraud: 'fraud',
  nsfw: 'nsfw',
  illegal: 'illegal',
  other: 'other'
};

exports.severity_level = exports.$Enums.severity_level = {
  low: 'low',
  medium: 'medium',
  high: 'high'
};

exports.report_status = exports.$Enums.report_status = {
  open: 'open',
  in_review: 'in_review',
  closed: 'closed'
};

exports.announcement_status = exports.$Enums.announcement_status = {
  draft: 'draft',
  published: 'published',
  expired: 'expired'
};

exports.feature_slot_key = exports.$Enums.feature_slot_key = {
  home_hero: 'home_hero',
  home_rail: 'home_rail',
  sidebar_banner: 'sidebar_banner'
};

exports.ticket_priority = exports.$Enums.ticket_priority = {
  low: 'low',
  medium: 'medium',
  high: 'high',
  urgent: 'urgent'
};

exports.ticket_status = exports.$Enums.ticket_status = {
  open: 'open',
  pending: 'pending',
  closed: 'closed'
};

exports.contact_channel = exports.$Enums.contact_channel = {
  email: 'email',
  whatsapp: 'whatsapp',
  twitch: 'twitch',
  youtube: 'youtube',
  instagram: 'instagram',
  other: 'other'
};

exports.audit_status = exports.$Enums.audit_status = {
  success: 'success',
  failed: 'failed'
};

exports.webhook_status = exports.$Enums.webhook_status = {
  received: 'received',
  processed: 'processed',
  failed: 'failed'
};

exports.Prisma.ModelName = {
  user: 'user',
  profile: 'profile',
  media: 'media',
  tag: 'tag',
  player_tag: 'player_tag',
  boost: 'boost',
  report: 'report',
  strike: 'strike',
  user_note: 'user_note',
  announcement: 'announcement',
  feature_slot: 'feature_slot',
  featured_assignment: 'featured_assignment',
  setting: 'setting',
  support_ticket: 'support_ticket',
  contact_event: 'contact_event',
  audit_log: 'audit_log',
  webhook_event: 'webhook_event',
  session: 'session'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
